{"searchDocs":[{"title":"在Apollo Server中，如何解决‘413 Payload too large’错误？","type":0,"sectionRef":"#","url":"/blog/2023/413-payload-too-large","content":"施工中","keywords":"lin-xii 林十二 林十二XII blog 博客 小破站","version":null},{"title":"GraphQL schema 基本概念","type":0,"sectionRef":"#","url":"/blog/2023/apollo-server/graphql-schema-basics","content":"","keywords":"lin-xii 林十二 林十二XII blog 博客 小破站","version":null},{"title":"TL;DR​","type":1,"pageTitle":"GraphQL schema 基本概念","url":"/blog/2023/apollo-server/graphql-schema-basics#tldr","content":"Schema 是一种描述数据结构的方式，与数据实际存储的方式、结构和实现技术无关。 GraphQL uses a schema to describe the shape of data.The schema defines a hierarchy of types with field that are populated from data stores.The schema specifies exactly which queries and mutations are available for clients to excute. ","version":null,"tagName":"h2"},{"title":"翻译​","type":1,"pageTitle":"GraphQL schema 基本概念","url":"/blog/2023/apollo-server/graphql-schema-basics#翻译","content":"GraphQL server 使用 schema 来描述数据结构。Schema 划分了 type 和 field 的层次结构，这些 field 通常是存储在后端数据库中的。Schema 还定义了客户端可以执行的 queries 和 mutations。 这篇文章介绍了 schema 的基本概念，以及如何创建一个 GraphQL server。 ","version":null,"tagName":"h2"},{"title":"Original docs​","type":1,"pageTitle":"GraphQL schema 基本概念","url":"/blog/2023/apollo-server/graphql-schema-basics#original-docs","content":"Your GraphQL server uses a schema to describe the shape of your available data. This schema defines a hierarchy of types with fields that are populated from your back-end data stores. The schema also specifies exactly which queries and mutations are available for clients to execute. This article describes the fundamental building blocks of a schema and how to create one for your GraphQL server. ","version":null,"tagName":"h2"},{"title":"参考资料​","type":1,"pageTitle":"GraphQL schema 基本概念","url":"/blog/2023/apollo-server/graphql-schema-basics#参考资料","content":"Apollo Server Docs ","version":null,"tagName":"h2"},{"title":"GraphQL schema 命名习惯","type":0,"sectionRef":"#","url":"/blog/2023/apollo-server/naming-conventions","content":"","keywords":"lin-xii 林十二 林十二XII blog 博客 小破站","version":null},{"title":"TL;DR​","type":1,"pageTitle":"GraphQL schema 命名习惯","url":"/blog/2023/apollo-server/naming-conventions#tldr","content":"GraphQL 规范并没有强制要求命名规范，但建议遵循以下规则： Field names: camelCaseEnum values: ALL_CAPSType names: PascalCaseEnum names: PascalCase ","version":null,"tagName":"h2"},{"title":"翻译​","type":1,"pageTitle":"GraphQL schema 命名习惯","url":"/blog/2023/apollo-server/naming-conventions#翻译","content":"GraphQL 规范没有强制要求命名规范。不过，建立命名规范有助于确保一致性。我们建议使用以下约定： 字段名称：camelCase。许多 GraphQL 客户端是用 JavaScript、Java、Kotlin 或者 Swift 开发的，这些语言中，变量通常使用驼峰命名法。枚举值：ALL_CAPS。枚举值和常量比较相似。类型名称：PascalCase。JavaScript 等语言，类名通常使用帕斯卡命名法。枚举名称：PascalCase。 ","version":null,"tagName":"h2"},{"title":"Original docs​","type":1,"pageTitle":"GraphQL schema 命名习惯","url":"/blog/2023/apollo-server/naming-conventions#original-docs","content":"The GraphQL specification is flexible and doesn't impose specific naming guidelines. However, it's helpful to establish a set of conventions to ensure consistency across your organization. We recommend the following: Field names should use camelCase. Many GraphQL clients are written in JavaScript, Java, Kotlin, or Swift, all of which recommend camelCase for variable names.Type names should use PascalCase. This matches how classes are defined in the languages mentioned above.Enum names should use PascalCase.Enum values should use ALL_CAPS, because they are similar to constants. These conventions help ensure that most clients don't need to define extra logic to transform the results returned by your server. ","version":null,"tagName":"h2"},{"title":"参考资料​","type":1,"pageTitle":"GraphQL schema 命名习惯","url":"/blog/2023/apollo-server/naming-conventions#参考资料","content":"Apollo Server DocsGraphQL Spec ","version":null,"tagName":"h2"},{"title":"小破站第一篇blog","type":0,"sectionRef":"#","url":"/blog/2023/first-blog","content":"","keywords":"lin-xii 林十二 林十二XII blog 博客 小破站","version":null},{"title":"开始写 blog 了​","type":1,"pageTitle":"小破站第一篇blog","url":"/blog/2023/first-blog#开始写-blog-了","content":"静极思动，准备捡起来原来的 blog 计划了。 ","version":null,"tagName":"h2"},{"title":"为什么写 blog​","type":1,"pageTitle":"小破站第一篇blog","url":"/blog/2023/first-blog#为什么写-blog","content":"大量的纸质笔记，查阅成本逐年升高。考虑将纸质笔记转移到互联网上，方便查阅。 ","version":null,"tagName":"h2"},{"title":"选择 blog​","type":1,"pageTitle":"小破站第一篇blog","url":"/blog/2023/first-blog#选择-blog","content":"为什么不用现成的，例如： 印象笔记语雀掘金infoQCSDN博客园知乎 平台是助力，也是禁锢。希望我的文字，能让更多的人看到。 ","version":null,"tagName":"h2"},{"title":"IPS产品经理","type":0,"sectionRef":"#","url":"/blog/2018/ips-product-designer","content":"","keywords":"lin-xii 林十二 林十二XII blog 博客 小破站","version":null},{"title":"吐槽​","type":1,"pageTitle":"IPS产品经理","url":"/blog/2018/ips-product-designer#吐槽","content":"2017 年 8 月, 我被转岗了. 转岗后, 我遇见了很多不曾想过的奇葩人 奇葩事. 本文仅从我个人角度, 描述我看到的, 一位新人产品经理, 如何从相识, 到相知, 然后走到了开发的对立面. 本文充满了个人情感, 完全作为吐槽用, 或许并不客观, 但保证所述为真材实料. 批评不自由, 则赞美无意义. ","version":null,"tagName":"h2"},{"title":"初来​","type":1,"pageTitle":"IPS产品经理","url":"/blog/2018/ips-product-designer#初来","content":"大概是 8 9 月份某天吧, 这位并不萌的新产品经理来了, 被另一位产品经理带着, 和组里所有的开发&amp;测试同学, 挨个碰了个面, 混了个脸熟. 由于我在新组里, 一直处于游离态, 只加了一个群, 实在看不到这位产品经理来的时间, 只能凭印象了. 说实话, 第一感觉不是很好, 换句话说, 毫无理由, 我并不喜欢这位产品经理. 不过虽然不怎么待见人家, 我还是希望她段位高一些的, 起码让我这种想躺赢的, 能躺的舒服些 😜 我这个人可能比较二, 或者是迷? 我很看重和陌生人第一次见面的感觉. 这个感觉, 从学生时代到现在, 整体偏准, 起码比我王者荣耀的胜率高多了. 那个, 戴口罩, 以及生病的不算. ","version":null,"tagName":"h3"},{"title":"平静​","type":1,"pageTitle":"IPS产品经理","url":"/blog/2018/ips-product-designer#平静","content":"10 月份前后, 由于正在进行的项目需求已定, 也有可能是我没有进入到敌军核心, 了解不到高层信息, 新来的产品经理貌似没有什么施展拳脚的机会. 整体上, 这段时间我们就像两条平行线. 如果不是偶尔来这边找人, 我都忘了有这么号产品经理了... ","version":null,"tagName":"h3"},{"title":"成长​","type":1,"pageTitle":"IPS产品经理","url":"/blog/2018/ips-product-designer#成长","content":"10 月末, 接到了一个管理平台的定制, 用来参加入围测试. 需要新开发一些功能. 需求讨论会上, 是我第一次和这位接触. 一共几次会议, 这位话不多, 很平静. 只是偶尔的几句, 我们能做就做吧, 功能越多越好, 显得略微有些刺耳. 我觉得这位产品经理, 已经熟悉了一些产品特性, 但她可能还没有吃透, 她还有进步的空间. ","version":null,"tagName":"h3"},{"title":"暴雨前夕​","type":1,"pageTitle":"IPS产品经理","url":"/blog/2018/ips-product-designer#暴雨前夕","content":"无聊的时间总是过得很快, 一晃就年底. 转岗几个月, 正儿八经的代码基本没写, 光熟悉现有的坑, 和前面提到的, 我自己埋的那个入围测试的坑了. 这段时间, 能拿出来念叨念叨的事, 也就是做了 2 个 RG 独角兽, 2 个 PG 独角兽, 还有一些其他的模型. emmm, 做龙桃子独角兽的时候, 因为某同学的一句话, 导致心神恍惚, 左手血祭了. ","version":null,"tagName":"h3"},{"title":"双龙出海​","type":1,"pageTitle":"IPS产品经理","url":"/blog/2018/ips-product-designer#双龙出海","content":"新年新气象, 在新的一年里, 大家也都开始各显神通. 每年年初, 大家都开始为今年产品发展的方向做规划, 我们也不例外. 可能我在转岗前, 和总监谈话的过程中, 说了些有点用处的想法, 我这名搬砖选手, 也参与了一次规划会. 会议上&quot;领导们&quot;讨论了很多, 机器学习 大数据 虚拟化 云等高大上的名词映入眼帘, 让我产生了今年要忙死的感觉, 这么多新技术, 肯定比去年血祭高达强多了. 为了适应市场需要, 今年的重点有两个. 补足管理平台的分析能力和强化盒子的检测能力, 并完成二者的联动. 在五月份发布, 推向市场, 以便迎合三四季度冲量的目标. 方向定下后, 就要考虑如何更好 更高效 更平稳的落实在产品上, 高保真原型 需求文档必不可少. 我们这位已经不算新人的产品经理, 接下了高保真原型这份重担. 其中, 需求文档的梳理, 由一位 SE 负责, 最后他们一起梳理, 相辅相成, 为我们产品的发展, 添砖加瓦. 如果我非常闲, 有可能会再介绍下这位厉害的 SE😜 ","version":null,"tagName":"h3"},{"title":"初露锋芒​","type":1,"pageTitle":"IPS产品经理","url":"/blog/2018/ips-product-designer#初露锋芒","content":"燕子归来, 春暖花开, 转眼来到了万物复苏的季节. 我只搬管理平台的砖, 前面提到的年度任务, 需要产品经理的原型和 SE 的需求文档有个大致的脉络后, 我才能开始搬砖. 然鹅, 17 年底提出了 18 年核心项目的方案. 几个月过去, 小花马上就开了, 我们的产品经理还在辛苦的梳理需求, 设计原型. 我在一个偶然的情况下, 见到了一次貌似要给我用的, 用 Axure 做的原型. emmm, 怎么形容呢, 一言难尽吧, 省略 500 字.  产品经理这么辛苦, SE 肯定也不能闲着, 毕竟他俩得互帮互助, 相辅相成呢. SE 特地从成都跑到北京出差半个月, 据说是赶过来&quot;帮我&quot;梳理需求. 结果是显然的, 我不知道 SE 是如何梳理需求的, 也不清楚他有没有圆满完成任务, 更没看见梳理好的需求包文档. 但是, 我确确实实听他在工位哼了两周的歌, 不要钱的那种. ","version":null,"tagName":"h3"},{"title":"GTMD​","type":1,"pageTitle":"IPS产品经理","url":"/blog/2018/ips-product-designer#gtmd","content":"万事俱备, 东风已来, 那就搬起砖来? GTMD, 我还是太年轻了. 说实话, 已经记不清是 18 年几月份, 反正到了穿短袖的季节. 产品经理扔给我们个 Axure 画的&quot;高保真&quot;原型, SE 掏出份需求包文档. 由于 Axure 这软件太高端, 我等傻搬砖的如何会用这么金贵的东西. 再说了, 就算会用, 也没那么高的抽象艺术解析力呀, 我还是看需求包文档吧. 那直白的描述, 平铺直叙的文档脉络, 满屏幕, 只有主语不同的句式, 多 TMD 浅显易懂. 果然技术出身的 SE 更懂人心, 知道我等理解能力不行, 又没啥抽象派的艺术细胞, 给了个这么接地气的 Excel🙃  花了几周, 把之前那些接地下气的代码重写一部分. 又接着地气开发了俩月. 产品经理在评审会上认为我按照需求包文档搬的砖, 不符合日日更新的&quot;高保真&quot;原型设计, 需要重做. 我一个搬砖的能怎么办, 肯定得找牛人 SE 来帮忙啊. 让我没想到的是, 牛人也有牛人的烦恼. 当南北两大家齐聚一堂, 共议需求时, 会产生何种的化学反应? 当然是各有各的尊严, 据理力争. 没有什么是一次会议解决不了的, 如果有, 那就多来几次. 直到搁置争议, GTMD. GTMD, 代指&quot;共同面对&quot;. 出自王者荣耀, 四冠王战队 QGHappy, 中单选手伪装. ","version":null,"tagName":"h3"},{"title":"忽忽悠悠​","type":1,"pageTitle":"IPS产品经理","url":"/blog/2018/ips-product-designer#忽忽悠悠","content":"太极生两仪, 两仪生四象, 四象生八卦~ 产品经理认为需求包文档不合理, 要求舍弃需求包文档, 按照日日更新的&quot;高保真&quot;原型来做. 作为一个在其他团队搬过砖的选手, 对这种要求, 我肯定是拒绝的. 然鹅, 对于我的不配合, 产品经理非常不满, 问我: 为什么别人家都能把砖砌成双子塔, 而我们只能守着小钟楼? 我无言以对, 只能用上无师自通的太极八卦之术来应对. emmm, 就是和稀泥. 经过几个小时的努力, 写了俩月的代码, 基本可以半重构了. 至于发布日期, 抱歉, 我司 deadline 不就是拿来延的么? ","version":null,"tagName":"h3"},{"title":"硝烟再起​","type":1,"pageTitle":"IPS产品经理","url":"/blog/2018/ips-product-designer#硝烟再起","content":"春夏秋冬, 一年四季. 转眼就快能吃冬至的饺子了. 去年计划今年 5 月, 发布我们的&quot;单子塔&quot;. 由于开发能力不足, 无法适应日新月异的新需求. 我们的产品, 已经维持了几个月的&quot;马上发布&quot;阶段. 上周五例会, 所有不管相关不相关的人员, 聚集一堂, 看着管理平台那 37 个 later 状态的八阿哥, 为他们选择归途. 我那的功能, 再次出现了争议. 从按照需求包文档不行, 改成跟随日日更新&quot;高保真&quot;开发. 结果这次会议上, &quot;高保真&quot;貌似也不合心意了, 需要重新讨论需求. 涉及到需求的讨论, 那肯定产品经理和 SE 两位大佬商议, 而商议的结果, 在周一上午草草出场, 看不到一丝心血. 不要问我和前面那个图有什么区别, 我也不知道.  我出离的愤怒, 在微信群里对产品经理发出了质问. 果然, 依旧是搁置争议, SP 版本再说.  懒得多说什么了, 还是写写文档吐吐槽, 多写代码多看书, 早睡早起身体好. 另祝大家早日上王者. ","version":null,"tagName":"h3"},{"title":"前端视角的可观测性(一)","type":0,"sectionRef":"#","url":"/blog/2023/observability-frontend-1","content":"","keywords":"lin-xii 林十二 林十二XII blog 博客 小破站","version":null},{"title":"TL;DR​","type":1,"pageTitle":"前端视角的可观测性(一)","url":"/blog/2023/observability-frontend-1#tldr","content":"Gartner 将应用可观测性列为2023 年重要战略趋势之一。 作为开发者, 即便没有专精此道。但了解一下，还是有必要的。 ","version":null,"tagName":"h2"},{"title":"前言​","type":1,"pageTitle":"前端视角的可观测性(一)","url":"/blog/2023/observability-frontend-1#前言","content":"最近，我所在的产品组，将完善监控系统，放入了版本规划中。 趁此良机，了解了一波可观测性相关的背景和技术。 同时，对原有的监控方式，进行了一定的改造。 ","version":null,"tagName":"h2"},{"title":"可观测性​","type":1,"pageTitle":"前端视角的可观测性(一)","url":"/blog/2023/observability-frontend-1#可观测性","content":"控制理论中的可观察性（observability）是指系统可以由其外部输出推断其其内部状态的程度。系统的可观察性和可控制性是数学上对偶的概念。可观察性最早是匈牙利裔工程师鲁道夫·卡尔曼针对线性动态系统提出的概念[1][2]。若以信号流图来看，若所有的内部状态都可以输出到输出信号，此系统即有可观察性。 ","version":null,"tagName":"h2"},{"title":"什么是可观测性？​","type":1,"pageTitle":"前端视角的可观测性(一)","url":"/blog/2023/observability-frontend-1#什么是可观测性","content":"可观测性是指能够通过检查系统或应用的输出、日志和性能指标来监控、测量和理解系统或应用的状态。 讲人话，我理解就是将传统监控系统的日志，进行了标准化、体系化。同时，将原来“孤岛式”的日志进行了“关联”。将所有日志组合成整体，以此来分析系统状态。 ","version":null,"tagName":"h3"},{"title":"为什么会出现？或者说，为什么现在火了？​","type":1,"pageTitle":"前端视角的可观测性(一)","url":"/blog/2023/observability-frontend-1#为什么会出现或者说为什么现在火了","content":"监控系统并不是什么稀罕事务，但为什么之前没有什么热度呢？ 我认为，是排查问题的门槛，变高了。变高的原因，主要有 2 方面： 系统复杂度数据量 系统复杂度​ 首先，是系统的复杂度在不断上升。单机软件、集群部署、云服务、虚拟化。 软件部署方式的每一次升级，都在提升软件系统的整体能力。 与此同时，一旦出现问题，排查&amp;解决问题的难度，也在不断上升。如果身边有运维同学，可以听他们讲一讲，独属于他们的、深夜里的故事 🤣 数据量​ 从计算机诞生，我们已经经历了单机软件、局域网、互联网，且身处移动互联网。 在网络高度普及的今天，软件和服务，包裹着每一个网民。网络触手的延伸，在提供了高度便利的同时，也给数据量带来了井喷式的增长。这给问题排查，增加了不小的难度。 当下，我们身处移动互联网的上半场，当摄像头、家用电器、车载系统和新基建中无处不在的传感器入网后，在移动互联网的下半场（IoT），数据量的暴增，是可以预见的。 所以，传统监控系统相对片面、局部的监控指标，无法满足复杂环境下的系统状态监控、问题排查和系统调优。 ","version":null,"tagName":"h3"},{"title":"怎么用？​","type":1,"pageTitle":"前端视角的可观测性(一)","url":"/blog/2023/observability-frontend-1#怎么用","content":"Opentelemetry、Prometheus、Grafana、Jaeger 等等。现在已经有很多成熟的开源工具可供集成、或二次定制开发。也有不少收费的平台，方便使用。 通过这些可观测性工具，可以 更加全面的监控系统指标更清晰的分析调用链条更准确、更有把握的的优化系统瓶颈点 这些不是空口白话，我们产品在初步集成 Jaeger 后，已经发现了几处有价值的隐藏问题。这在原来，只能通过大规模的压力测试（如果有）、客户现场反馈来发现、修复。 后边有机会（如果不鸽），会分享一些脱敏的相关实践。 ","version":null,"tagName":"h3"},{"title":"一点想法​","type":1,"pageTitle":"前端视角的可观测性(一)","url":"/blog/2023/observability-frontend-1#一点想法","content":"这周，集成进系统的 Jaeger 基本可用了。通过和后端师傅的交流，发现了几处隐藏的问题，挺开心的。 虽然有些马后炮了，但在毕业不久的时候，就有对完善的监控体系的期待了。可惜，当时虽然有考虑过监控系统的雏形，但只停留在想象中了。现实里的时间，都去打游戏了。。。 总之，Observability相关的技术, 不是颠覆传统监控系统的银弹。 在我看来，更像是应运而生。是对传统监控体系的完善、补充和升级。 ","version":null,"tagName":"h2"},{"title":"参考资料​","type":1,"pageTitle":"前端视角的可观测性(一)","url":"/blog/2023/observability-frontend-1#参考资料","content":"wikiRedHat ","version":null,"tagName":"h2"},{"title":"关于我","type":0,"sectionRef":"#","url":"/blog/docs/about-me","content":"关于我 一个特别能睡的吃货。 一个刀耕火种的程序猿。 一个希望成为开发者的菜鸟。","keywords":"lin-xii 林十二 林十二XII blog 博客 小破站","version":"Next"},{"title":"Introduction to Apollo Server","type":0,"sectionRef":"#","url":"/blog/docs/apollo-server/Introduction","content":"Introduction to Apollo Server Apollo Server 是一个开源、规范化的 GraphQL 服务器实现。 它兼容任何 GraphQL client，包括 Apollo Client。这是构建产品化、自文档式、数据存储方式无关的 GraphQL API 的最佳方式。 你可以将 Apollo Server 用于：​ 将 GraphQL server 作为超级 GraphQL 服务中的子服务作为组件注入到现有的 Node.js 应用中。这些应用可以是基于 Express（包括MERN技术栈）、AWS Lambda、Azure Functions、Cloudflare、Fastify，和其他的框架或平台。 Apollo Server 可以提供什么能力：​ 简单的设置，你的客户端开发人员可以快速的进行开发工作渐进式引用，是你能够按照实际需求来添加功能特性优秀的兼容性，与数据源、打包方式和客户端实现方式无关生产能力完备，是你可以更自信的将 GraphQL 应用部署到生产环境","keywords":"lin-xii 林十二 林十二XII blog 博客 小破站","version":"Next"}],"options":{"languages":["en","zh"],"id":"default"}}